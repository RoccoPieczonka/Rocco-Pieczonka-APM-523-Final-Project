data = [
    0.5118  0.9505  0.1442  0.9486  0.6413  0.8526  0.5929  0.2801
    0.5118  0.9505  0.1442  0.9486  0.6413  0.8526  0.5929  0.2801
    0.5496  0.0276  0.7595  0.5381  0.1479  0.8196  0.6833  0.7871
    0.3297  0.7884  0.3032  0.4535  0.1916  0.8024  0.1913  0.0816
    0.1297  0.9494  0.4032  0.4535  0.1916  0.8024  0.1913  0.4016
    0.7504  0.2804  0.4852  0.9807  0.2740  0.0071  0.6457  0.7199
    0.9617  0.7248  0.5412  0.2769  0.8356  0.2819  0.2152  0.6383
    0.1607  0.9699  0.5161  0.1159  0.8051  0.9637  0.1505  0.4822
    0.6235  0.7767  0.6101  0.9179  0.8057  0.9627  0.2225  0.6265
    0.0396  0.5286  0.4593  0.0623  0.6735  0.9191  0.8268  0.8855
];

s0 = data(:, 1); s1 = data(:, 2); s2 = data(:, 3); s3 = data(:, 4);
y0 = data(:, 5); y1 = data(:, 6); y2 = data(:, 7); y3 = data(:, 8);

c0 = s0; c1 = s1; c2 = s2; c3 = s3;

n = 10; 
k = 4;

S = [s0 s1 s2 s3]; 
Y = [y0 y1 y2 y3];
C = [c0 c1 c2 c3];

B0 = eye(n);

B_recursive = B0;
W = zeros(n, k);
for i = 0:k-1
    si = S(:, i+1);
    yi = Y(:, i+1);
    ci = C(:, i+1);
    wi = yi - B_recursive * si;
    W(:, i+1) = wi; 
    denom = ci' * si;
    if abs(denom) < eps
        error('Denominator c_i^T s_i is zero at iteration %d', i);
    end
    term1 = (wi * ci' + ci * wi') / denom;
    term2 = (wi' * si) / (denom^2) * (ci * ci');
    B_recursive = B_recursive + term1 - term2;
end
disp('B_{k+1} from recursive update:');
disp(B_recursive);

D = zeros(k, k);
E = zeros(k, k);
for i = 1:k
    D(i, i) = C(:, i)' * S(:, i);
    E(i, i) = W(:, i)' * S(:, i); 
end

D_inv = inv(D);
D_inv2 = D_inv * D_inv;
M_k = [zeros(k) D_inv; D_inv -D_inv2 * E];

U = [W C];
V = [W'; C'];
B_compact = B0 + U * M_k * V;
disp('B_{k+1} from compact representation:');
disp(B_compact);

error_norm = norm(B_recursive - B_compact, 'fro');
disp('Frobenius norm of B_recursive - B_compact:');
disp(error_norm);

disp('Symmetry check for B_recursive (norm of B_recursive - B_recursive^T):');
disp(norm(B_recursive - B_recursive', 'fro'));
disp('Symmetry check for B_compact (norm of B_compact - B_compact^T):');
disp(norm(B_compact - B_compact', 'fro'));
